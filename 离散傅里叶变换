#include<stdio.h>
#include<opencv2/opencv.hpp>
#include"opencv2/highgui/highgui.hpp"
#include<opencv2/imgproc/imgproc.hpp>

using namespace cv;

int main(int argc, char** argv)
{

	//【1】以灰度模式读取原始图并显示
	Mat srcImage = imread("C:/Users/75741/Desktop/0F49FD1C9EB01DCA8546C761AF40620C.jpg", 0);
	if (!srcImage.data)
	{
		printf("读取图片错误\n");
		return false;
	}
	imshow("原始图像", srcImage);

	//ShowHelpText();

	//【2】将输入图片延扩到最佳尺寸，边界用0补充
	int m = getOptimalDFTSize(srcImage.rows);
	int n = getOptimalDFTSize(srcImage.cols);
	//将添加的像素初始化为0
	Mat padded;
	copyMakeBorder(srcImage, padded, 0, m - srcImage.rows, 0, m - srcImage.cols, BORDER_CONSTANT, Scalar::all(0));

	//【3】为傅里叶变换的结果（实部和虚部）分配存储空间
	//将planes数组组合合并成一个多通道的数组complexI
	Mat planes[] = { Mat_<float>(padded),Mat::zeros(padded.size(),CV_32F)};
	Mat complexI;
	merge(planes, 2, complexI);

	//【4】进行就地离散傅里叶变换
	dft(complexI, complexI);

	//【5】将附属转换为幅值，即=》log(1+sqrt(Re(DFT(I)))^2+Im(DFT(I))^2)
	split(complexI, planes); //将多通道数组complexI分离成几个单通道数组
	magnitude(planes[0], planes[1], planes[0]);
	Mat magnitudeIamge = planes[0];

	//【6】进行对数尺度(logarithmic scale)缩放
	magnitudeIamge += Scalar::all(1);
	log(magnitudeIamge, magnitudeIamge);//求自然对数

	//【7】剪切和重分布幅度图象限
	//若有奇数行或奇数列，进行频谱裁剪
	magnitudeIamge = magnitudeIamge(Rect(0, 0, magnitudeIamge.cols & -2, magnitudeIamge.rows & -2));
	//重新排列傅里叶图像中的象限，使得原点位于图像中心
	int cx = magnitudeIamge.cols / 2;
	int cy = magnitudeIamge.rows / 2;
	
	Mat q0(magnitudeIamge, Rect(0, 0, cx, cy));//左上
	Mat q1(magnitudeIamge, Rect(cx, 0, cx, cy));//右上
	Mat q2(magnitudeIamge, Rect(0, cy, cx, cy));//左下
	Mat q3(magnitudeIamge, Rect(cx, cy, cx, cy));//右下
	//交换象限（左上与右下）
	Mat tmp;
	q0.copyTo(tmp);
	q3.copyTo(q0);
	tmp.copyTo(q3);
	//交换象限（左下与右上）
	q1.copyTo(tmp);
	q2.copyTo(q1);
	tmp.copyTo(q2);

	//【8】归一化，用0-1之间的浮点值将矩阵变换为可视的图像格式
	normalize(magnitudeIamge, magnitudeIamge, 0, 1, NORM_MINMAX);

	//【9】显示效果图
	imshow("频谱幅值", magnitudeIamge);
	waitKey();

	return 0;
}
